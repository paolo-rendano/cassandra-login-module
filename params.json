{"name":"cassandra-login-module","tagline":"A JAAS login module to implement authentication with cassandra database","body":"# cassandra-login-module\r\nA JAAS login module to implement authentication with Apache Cassandra\r\n\r\n*Perfectly fits with Apache ActiveMQ*\r\n\r\n#Features\r\n\r\n1. [X] Username and password authentication based on an external cassandra datasource\r\n2. [X] Password is stored obscured with one-way hash SHA-256 function\r\n3. [X] External configuration point\r\n4. [X] Optional authentication with cassandra database\r\n5. [X] Optional SSL communication between driver and database\r\n6. [X] User groups association on datasource\r\n7. [ ] API to manage users and groups (in progress...)\r\n8. [ ] Connection Pooling options\r\n9. [X] Customized connection retry at startup\r\n \r\n#Getting started\r\n\r\n##Compile Jar\r\nPrerequisites: JDK 1.7 and Apache Maven 3.x properly installed\r\n\r\n1. download sources from git and explode them\r\n2. go in project home and type: mvn clean package\r\n\r\n##Cassandra keyspace initialization\r\nPrerequisites: Apache Cassandra 2.1.x properly installed. Use cqlsh to input following commands.\r\n\r\n*   create keyspace (according to your architectural decisions)\r\n\r\n```\r\n\tCREATE KEYSPACE keyspace-name WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };\r\n```\r\n\r\n*   create users table \r\n\r\n```\r\n\tUSE keyspace-name;\r\n```\r\n\t\r\n```\r\n\tCREATE TABLE users (\r\n\t   uname varchar,\r\n\t   fname varchar,\r\n\t   lname varchar,\r\n\t   pwd varchar\r\n\tPRIMARY KEY (uname));\r\n```\r\n\r\n*   create groups table\r\n\r\n```\r\n\tCREATE TABLE groups (\r\n\t\tuname varchar,\r\n\t\tgname varchar,\r\n\tPRIMARY KEY(uname, gname));\r\n```\r\n\r\n\r\n*   insert example user (user: dduck password: password)\r\n\r\n```\r\n\tINSERT INTO users (uname, fname, lname, pwd) VALUES ( 'dduck', 'Donald', 'Duck', 'XohImNooBHFR0OVvjcYpJ3NgPQ1qq73WKhHvch0VQtg=');\r\n```\r\n\r\n*   insert example group (user: dduck group: ducks)\r\n\r\n```\r\n\tINSERT INTO groups (uname, gname) VALUES ( 'dduck', 'ducks');\r\n```\r\n\r\n\r\n###Note  \r\nYou can easily hash password with java function:\r\n\r\n```\r\n\tString password = \"password\";\r\n\tMessageDigest mdigest = MessageDigest.getInstance(\"SHA-256\");\r\n\tmdigest.update(password.getBytes(\"UTF-8\"));\r\n\tString hashed = Base64.encodeBase64String(mdigest.digest());\r\n```\r\n\r\n##Example 1 - Install in ActiveMQ\r\n\r\n*   put artifact jar (cassandra-login-module-x.y.z.jar) into $ACTIVEMQ_HOME/lib\r\n*   put external dependencies into $ACTIVEMQ_HOME/lib:\r\n  - cassandra-driver-core-2.1.x-shaded.jar\r\n  - guava-14.0.1.jar\r\n  - metrics-core-3.0.2.jar\r\n  - hawtbuf-1.11.jar\r\n  - slf4j-api-1.7.10.jar\r\n\r\n\r\n*   add following block into $ACTIVEMQ_HOME/conf/login.config\r\n\r\n```\r\n\tactivemq-cassandra {\r\n    \t\tit.paolorendano.cml.CassandraLoginModule required;\r\n\t};\r\n```\r\n\r\n*   merge following block within $ACTIVEMQ_HOME/conf/activemq.xml\r\n\r\n```\r\n\t<bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\r\n\t\t<property name=\"locations\">\r\n\t\t\t<list>\r\n\t\t\t\t...\r\n\t\t\t\t<value>file:${activemq.conf}/cassandra.properties</value>\r\n\t\t\t</list>\r\n\t\t</property>\r\n\t</bean>\r\n\t\r\n\t<import resource=\"classpath*:/cassandra-jaas-config.xml\" />\r\n\t\r\n\t<broker>\r\n\t\t<plugins>\r\n\t\t\t<jaasAuthenticationPlugin configuration=\"activemq-cassandra\" />\r\n\t\t</plugins>\r\n\t</broker>\r\n\t\r\n```\r\n\r\n*   create and properly configure $ACTIVEMQ_HOME/conf/cassandra.properties\r\n\r\ncassandra.properties layout example:\r\n\r\n```\r\n\tcassandra.contactPoints=ec2-x-y-z-w.eu-central-1.compute.amazonaws.com, ec2-x-y-z-w.eu-central-2.compute.amazonaws.com\r\n\tcassandra.keyspace=keyspace-name\r\n\tcassandra.authentication=true\r\n\tcassandra.username=cassandra\r\n\tcassandra.password=cassandra\r\n\tcassandra.useSSL=true\r\n\tcassandra.truststorePath=${activemq.conf}/.truststore\r\n\tcassandra.truststorePassword=<truststore password here>\r\n\tcassandra.keystorePath=${activemq.conf}/.keystore\r\n\tcassandra.keystorePassword=<keystore password here>\r\n\tcassandra.connectionTimeout=60000\r\n\tcassandra.reconnectionBaseDelay=3000\r\n\tcassandra.reconnectionMaxDelay=60000\r\n\tcassandra.bootstrapReconnectionDelay=10000\r\n\tcassandra.bootstrapReconnectionRetries=6\r\n\t\r\n```\r\n\r\n- cassandra.contactPoints: a comma separated list of contact points\r\n- cassandra.keyspace: the name of the keyspace to connect to\r\n- cassandra.authentication: true if cassandra requires username/password authentication\r\n- cassandra.username: username to authentication against cassandra\r\n- cassandra.password: password to authentication against cassandra\r\n- cassandra.useSSL: true if cassandra requires client-to-node ssl encryption\r\n- cassandra.truststorePath: path to .truststore file\r\n- cassandra.truststorePassword: the password of truststore\r\n- cassandra.keystorePath: path to .keystore file\r\n- cassandra.keystorePassword: the password of keystore\r\n- cassandra.connectionTimeout: the timeout during connection to nodes\r\n- cassandra.reconnectionBaseDelay: (Exponential Backoff) reconnection delay after the connected node goes down\r\n- cassandra.reconnectionMaxDelay: (Exponential Backoff) reconnection delay cap after the connected node goes down\r\n- cassandra.bootstrapReconnectionDelay: (Periodic retry) reconnection delay on jaas module startup. (-1 fails immediately if cannot find nodes)\r\n- cassandra.bootstrapReconnectionRetries: number of reconnection to retry before throwing exception\r\n\r\n##Note - Enabling SSL client-to-node\r\nPlease refer to official documentation at http://docs.datastax.com/en/cassandra/2.0/cassandra/security/secureSSLCertificates_t.html\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}